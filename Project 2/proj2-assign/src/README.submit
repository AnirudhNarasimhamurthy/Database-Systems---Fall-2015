=================================================================
Project 2  - Buffer Manager
=================================================================

1. Name: Anirudh Narasimhamurthy(u0941400)


2. I have implemented all the features required in buf.C and my code passed all the sample test cases that were provided
to us. I have also tried to implement the error handling codes using enums
and I am returning the ERROR or NON-OK status messages using MINIBASE_CHAIN_ERROR. I have made use of the error codes/enums
which were defined in buf.H of Project 1. However I have not used all the error messages/codes defined in the enums and have
implemented only few of them. But the code runs smoothly without errors and if you run this code with different test cases
or input which would cause the code to go to the NON-OK return statements, then you can see the error messages generated
by my code. I feel it should be good for the situations which I have handled. But there definitely could be other
error messages/scenarios which could have been unhandled.



3. Implementation of Love/hate replacement policy:
==================================================

The implementation details of my love/hae replacement policy is as follows:

Data Structures used:
=====================

a. Structure for the hash map:
 struct HashMap
    {
        int frame_no;
        PageId page_no;
        HashMap *next;

    };

b. HashMap* directory[HTSIZE];

c. Lists for the replacement queues:

    std::list<PageId> love_queue;
    std::list<PageId> hate_queue;

The functions for push/pop from the love/hate queue as well as the functionality to remove an element from the love/hate
queue was coded.All the functions were placed inside a structure "replacementQueue".

Reason for choosing lists:
==========================

Lists allow easy insertion and deletion.Also since our Love and Hate Queues are going to use MRU and LRU, they are effectively
queue and a stack. But the advantage with using lists was we could also perform removal of an item in constant time.
Also C++ list's offer methods for push_front and push_back and as well as pop_front and pop_back.These were quite useful
and perfectly fits our scenario. The remove element method in particular is useful for the scenario when the page to be pinned
is in love/hate queue and so it first needs to be removed from there and then read into buffer pool. Delete
operations is stack/queue might take more time as we have to traverse to get to the element. But list offers
constant time deletion.

Love/hate status tracking:
==========================

In order to keep track of the love/hate status when a page is unpinned, I had a hateFlag data member inside my Buffer
Descriptor. If a page was marked as loved even once, then its hateFlag is always set to False unless it is removed/freed.
By default I had set the hateFlag to True. This ensures if and when a page was marked as loved, I would update my flag and
that will give me an indication of which queue to push the page. And the same flag is used by me to check before popping, which
queue needs to be popped.

Hash table was basically implemented as array of pointers to lists. The lists in this case were linked lists created using struct
HashMap and the directory was an array of pointers of the structure type.

Replacement Policy Implementation
==================================

I have implemented the love/hate replacement as per the instructions given in the assignment. If no free frames are available
or in other words if bufPool is full, I then go the hate queue first to check if there are any pages in the queue.
If so, I pop the most recent element which was inserted into the queue so that it confirms to the MRU policy.
I get the corresponding frame no for the page and then read the content of the new page to be pinned into the frame
and set the intial values for the fields in the buffer descriptor.

If there are no pages in the hate queue, then I go and check into the love queue to see if it has any pages in it.If it has
then all those pages are potential candidates for replacement and I choose the page which was leat recently used.
I then repeat the same process as I did for a page from the hate queue.

If both the conditions fail, i.e when the hate/love queue does not have any pages and the bufferpool is full, then I return
CANNOT_PIN_PAGE error status message.